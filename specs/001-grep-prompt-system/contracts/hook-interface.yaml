---
title: "Enhanced UserPromptSubmit Hook Interface Contract"
version: "1.0.0"
description: "Contract for the enhanced UserPromptSubmit hook supporting prompt content modification"

# Input Contract - UserPromptSubmitPayload
input:
  type: "object"
  description: "JSON payload sent to hook via stdin"
  required: ["session_id", "transcript_path", "hook_event_name", "prompt"]
  properties:
    session_id:
      type: "string"
      description: "Unique session identifier"
      example: "sess_abc123"
    transcript_path:
      type: "string"
      description: "Path to the conversation transcript file"
      example: "/tmp/claude_session/transcript.json"
    hook_event_name:
      type: "string"
      const: "UserPromptSubmit"
      description: "Hook event identifier"
    prompt:
      type: "string"
      minLength: 1
      description: "User's input prompt text to be processed"
      example: "Help me build a sidebar component for my React app"

# Output Contract - EnhancedHookResult
output:
  type: "object" 
  description: "Hook result supporting both blocking and content modification"
  properties:
    blocked:
      type: ["boolean", "null"]
      description: "Whether to block the operation (null = allow)"
      default: null
    message:
      type: ["string", "null"]
      description: "User-visible message for blocked operations"
      default: null
    modified_content:
      type: ["string", "null"]
      description: "Enhanced prompt content to replace original"
      default: null
    modification_log:
      type: "array"
      description: "Log of applied modifications for debugging"
      items:
        type: "string"
      default: []

# Communication Protocol
communication:
  input_method: "stdin"
  input_format: "json"
  output_method: "stdout"
  output_format: "json"
  exit_codes:
    success: 0
    blocked: 2
    error: 1

# Hook Behavior Contracts

behaviors:
  content_modification:
    description: "When prompt content is modified"
    conditions:
      - "Pattern rules match user prompt"
      - "File references successfully resolved"
      - "Processing time < 100ms"
    result:
      blocked: null
      modified_content: "enhanced prompt with injected context"
      modification_log: ["Applied rule: sidebar context injection"]
    
  blocking_operation:
    description: "When operation should be blocked"
    conditions:
      - "Critical error in pattern processing"
      - "Required context file missing and marked as critical"
    result:
      blocked: true
      message: "Operation blocked: {reason}"
      modified_content: null
      
  pass_through:
    description: "When no modifications are needed"
    conditions:
      - "No pattern rules match"
      - "Feature disabled in configuration"
      - "Empty pattern list"
    result:
      blocked: null
      message: null
      modified_content: null

# Error Handling Contract
error_handling:
  configuration_errors:
    behavior: "log warning, disable feature, pass through"
    exit_code: 0
  pattern_compilation_errors:
    behavior: "skip invalid patterns, continue processing"
    exit_code: 0
  file_reference_errors:
    behavior: "skip missing files, log warning, continue"
    exit_code: 0
  performance_timeout:
    behavior: "return original prompt, log warning"
    exit_code: 0
    threshold: "100ms"
  critical_system_errors:
    behavior: "block operation with error message"
    exit_code: 1

# Pattern Matching Contract
pattern_matching:
  regex:
    engine: "regex crate"
    flags: "case_insensitive optional"
    syntax: "Rust regex syntax"
    max_complexity: "reasonable performance bounds"
  
  glob:
    engine: "glob crate" 
    patterns: "shell-style wildcards"
    case_sensitivity: "platform dependent"
    
  evaluation_order: "configuration order (First/All/Priority)"
  short_circuit: "when processingOrder = First"

# File Reference Contract  
file_references:
  syntax: "@{relative_path}"
  resolution:
    base_directory: "current working directory"
    path_validation: "must exist and be readable"
    size_limit: "10KB per file"
    encoding: "UTF-8 required"
  
  error_handling:
    missing_file: "skip pattern, log warning"
    permission_denied: "skip pattern, log error"
    size_exceeded: "skip pattern, log warning"
    encoding_error: "skip pattern, log error"

# Performance Contract
performance:
  target_latency: "< 100ms"
  timeout_behavior: "return original prompt"
  memory_limit: "reasonable bounds for CLI tool"
  caching: "none (stateless per invocation)"

# Backward Compatibility
compatibility:
  existing_hooks: "no breaking changes"
  configuration: "additive only"
  default_behavior: "pass-through when disabled"