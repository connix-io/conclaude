on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bun-version: [1.1.38, latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ matrix.bun-version }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run type checking
        run: bun run typecheck
        
      - name: Run tests
        run: bun test
        
      - name: Verify CLI executable
        run: |
          if [ ! -f "src/index.ts" ]; then
            echo "CLI source file not found"
            exit 1
          fi
          # Test that the CLI can be invoked
          echo '{}' | timeout 2s bun src/index.ts --help || true
          echo "CLI verification completed"

  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run linting
        run: bun run lint
      
      - name: Validate schema generation
        run: |
          echo "üì¶ Generating JSON schema..."
          bun run schema:generate
          
          if [ ! -f "schema.json" ]; then
            echo "‚ùå Schema file was not generated"
            exit 1
          fi
          
          # Validate JSON syntax
          cat schema.json | jq . > /dev/null || {
            echo "‚ùå Generated schema is not valid JSON"
            exit 1
          }
          
          # Check schema structure
          if ! jq -e '.definitions.ConclaudeConfig' schema.json > /dev/null; then
            echo "‚ùå Schema missing ConclaudeConfig definition"
            exit 1
          fi
          
          echo "‚úÖ Schema generation validation passed"

  nix:
    name: Nix Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            
      - name: Setup Nix Cache
        uses: cachix/cachix-action@v13
        with:
          name: devenv
          
      - name: Check flake
        run: nix flake check --show-trace
        
      - name: Build conclaude package
        run: nix build .#conclaude --show-trace
        
      - name: Test devshell
        run: nix develop --command echo "‚úÖ Devshell loads successfully"
        
      - name: Run Nix lint command
        run: nix run .#lint
        
      - name: Run Nix tests command  
        run: nix run .#tests
        
      - name: Test formatter
        run: nix fmt --help

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run security audit
        run: bun audit || true  # Don't fail CI on audit issues for now
        
      - name: Check for vulnerabilities
        run: |
          echo "Security audit completed"
          # Add specific vulnerability checks if needed
