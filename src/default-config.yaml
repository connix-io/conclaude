# Conclaude YAML Configuration - Complete Default Configuration
# This configuration defines how conclaude handles Claude Code hook events
# All supported options are shown below with their default values

# Stop hook configuration - runs when Claude is about to stop
stop:
  # Commands to run during Stop hook
  # Each line is executed as a separate bash command
  run: ""

  # Alternative structured command format with optional custom error messages
  # Each command can have its own error message, and control output display
  commands: []
  # Examples:
  # commands:
  #   - run: "echo 'Starting build...'"
  #     showStdout: true    # User/Claude sees: "Starting build..."
  #
  #   - run: "npm test"
  #     showStdout: true    # Show test results to user/Claude
  #     showStderr: true    # Show test errors to user/Claude
  #     message: "Tests failed - please fix failing tests before continuing"
  #
  #   - run: "npm run build"
  #     showStderr: true    # Only show build errors to user/Claude, hide stdout
  #     message: "Build failed - please fix compilation errors"

  # Infinite mode - allows Claude to continue automatically
  # When enabled, Claude receives the infiniteMessage to continue working
  # instead of ending the session after stop hook commands succeed
  infinite: false

  # Message to send when infinite mode is enabled
  infiniteMessage: "continue working on the task"

  # Alternative to infinite mode - run for a specific number of rounds
  # When set, Claude will continue for the specified number of rounds
  rounds: null
  # Example: rounds: 3

  # Grep rules for stop hook - scan files for forbidden patterns
  # Files matching filePattern are checked for forbiddenPattern
  grepRules: []
  # Example:
  # grepRules:
  #   - filePattern: "**/*.js"
  #     forbiddenPattern: "console\\.log"
  #     description: "No console.log statements allowed in production code"

# Validation rules for hook processing
rules:
  # Prevent Claude from creating or modifying files at the repository root
  # Helps maintain clean project structure
  preventRootAdditions: true

  # Files that Claude cannot edit, using glob patterns
  # Supports various glob patterns for flexible file protection
  uneditableFiles: []
  # Examples:
  # uneditableFiles:
  #   - "./package.json"      # specific file
  #   - "*.md"                # file extension
  #   - "src/**/*.ts"         # nested patterns
  #   - ".env*"               # environment files
  #   - "docs/**"             # entire directories
  #   - "{package,tsconfig}.json"  # multiple specific files

  # Tool usage validation rules - control which tools can be used on which files
  # Allows fine-grained control over tool usage based on file patterns
  toolUsageValidation: []
  # Examples:
  # toolUsageValidation:
  #   - tool: "Write"
  #     pattern: "**/*.js"
  #     action: "allow"
  #     message: "Writing to JavaScript files is allowed"
  #   - tool: "*"
  #     pattern: ".env*"
  #     action: "block"
  #     message: "Environment files cannot be modified"

# Pre-tool-use hook configuration - runs before tools are executed
preToolUse:
  # Grep rules that run before tools execute on files
  # Checks file content for forbidden patterns before allowing modifications
  grepRules: []
  # Example:
  # grepRules:
  #   - filePattern: "**/*.py"
  #     forbiddenPattern: "exec\\(|eval\\("
  #     description: "Dangerous eval/exec functions not allowed"

  # Directories where file additions are prevented (in addition to root)
  # List of directory paths where new files cannot be created
  preventAdditions: []
  # Examples:
  # preventAdditions:
  #   - "dist"
  #   - "build"
  #   - "node_modules"

  # Prevent editing of auto-generated files (enabled by default)
  # Checks for common markers like "DO\ NOT\ EDIT", "Code\ generated\ by", etc.
  preventGeneratedFileEdits: true

  # Custom message when blocking auto-generated file edits
  # Available placeholders: {file_path}, {marker}
  generatedFileMessage: null
  # Example:
  # generatedFileMessage: "Cannot modify {file_path} - it contains '{marker}' indicating it's auto-generated"

